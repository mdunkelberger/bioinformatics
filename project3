#include <iostream>
#include <string>
#include <stdio.h>
#include <math.h>
#include <vector>
std::string binaryKmer(int k, int num);
std::vector<std::string> createKMers(int k);
std::vector<std::vector<char>> createGraph(std::vector<std::string> kmers, int k);
void print(std::vector<std::string> arr);

int main(){
	int k;
	std::cout<<"Input k: ";
	std::cin>>k;
	std::cout<<"\n";
	
	std::vector<std::string> kmers;
	kmers = createKMers(k);
	std::vector<std::vector<char>> myGraph;
	myGraph = createGraph(kmers, k);
	//print(kmers);
	
	//prints the graph adjacency matrix from createGraph
	for(unsigned int i = 0; i <myGraph.size(); i++){
		for(unsigned int j = 0; j < myGraph[i].size(); j++){
			std::cout<<myGraph[i][j]<<" ";//no connection between the nodes
		}
		std::cout<<std::endl;
	}
	
	
return 0;
}

//makes the kmers from int
std::string binaryKmer(int k, int num){
	
	std::string str = "";
	for(int i = (k-1); i >= 0; i--){
		int j = num >> i;
		if(j & 1)
			str += "1";
		else
			str += "0";
	}
	return str;
}
//creates array of kmers 
std::vector<std::string> createKMers(int k){
	//double u = (double) k;
	int size = 1;
	//std::cout<<"Check";
	//size is 2^k 
	for(int i = 0; i <k; i++)
		size *=2;
	//std::cout<<size;
	std::vector<std::string> arr;//empty vector
	for(int i = 0; i < size; i++){
		std::string str = binaryKmer(k, i);
		arr.push_back(str);
		//arr.push_back(binaryKmer(k, i));
	}
	return arr;
}
void print(std::vector<std::string> arr){//prints kmers
	for(unsigned int i = 0; i < arr.size(); i++)
		std::cout<<arr[i]<<" ";
	
	std::cout<<"\n";
}
std::vector<std::vector<char>> createGraph(std::vector<std::string> kmers, int k){
	
	//create char array that will be traversed
	//n means no connection
	std::vector<std::vector<char>> graph (kmers.size(), std::vector<char>(kmers.size(), 'n'));
	
	for(unsigned int i = 0; i <kmers.size(); i++){
			//create 0 connections first
			//for instance connect 111 to 110
		
			//doesn't fill out graph correctly
			//shifting the characters of a kmer left by 1 space
			//then add a 0 or 1 to the end
			//compare with all kmers
			//if a match update the array
			for(unsigned int u =0; u <kmers.size(); u++){
				std::string str0 = kmers[u].substr(1);
				str0 = str0 + "0";
				//std::cout<<str0<<"\n";
					if(str0.compare(kmers[u]) == 0){
						graph[i][u] = '0';
						
					}
			}
			//now make 1 connections
			for(unsigned int u =0; u <kmers.size(); u++){
				std::string str1 = kmers[u].substr(1);
				str1 += "1";
				//std::cout<<str1<<"\n";
					if(str1 == kmers[u]){
						graph[i][u] = '1';
					
					}
			}
			//array for k = 2 looks like
			/*  0 n n 1
				0 n n 1
				0 n n 1
				0 n n 1
			*/
	}
	
	return graph;
	
	
}
